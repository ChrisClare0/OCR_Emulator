OCR Emulator Help....

TO START:

Write your OCR code in notepad or (whatever is similar on MACS/Linux..) and save as a txt file. 
Then use the LOAD button to read it in and the "Interpret" it. This will check to make sure the code can be run.
You can then STEP through the code line by line...or "fetch-execute" by fetch-execute"

NUMBERS:

All data is in hex. Live with it.

SYNTAX:

The source file needs to have three columns.These can be serarated by spaces or tabs(preferred!)
The first column will be the label or be left blank. The second the opcode and the third registers etc..
so
label:	op	detail

eg:-
fred:	movi	S0,66
  mov	S0,S1
		
note that line without a label must start with tab or space...
and the opcode must be followed with a space or tab so the following won't do!

movi S0,ff    (no space/tab before the opcode)
moviS0,FF     (no separator between opcode and data)

also we don't like...
		movi	S0,   FF     (space after , not allowed)
		mov  i	S0,FF		 (no gaps in opcodes)		
		movi	S0   ,FF     (no gaps in data)
	
There must be NO SPACES within the fields...(although in fact the last one does work!)


LABELS:

Labels must end with a :
There is no checking on duplicates, so you need to make sure they are unique.
Labels can be any length must must not include control characters or the reserved words READADC, 
WAIT1MS and READTABLE etc.

CASE:

Case is always ignored so the following are equivalent
fred:	movi	S0,66
FRED:	MOVI	S0,66

COMMENTS:

Comments are introduced by a semicolon; this is a good use for it as few people know how to use it in 
ordinary English these days.  Anything on a line following a ; is ignored
fred:	movi	S0,66   ;this is a comment  mov s,so ( still part of the comment)
;a comment fred:	movi	S0,66 so this is all ignored


REGISTERS:

Registers are S0 - S7... (wierd - but I didn't design this!)

and (non-standardly) are always  destination , source
so mov S0,S1 moves FROM S1 TO S0.

(there is also a sneakly S8 - see below under "BREAK POINTS"


TABLES:

The specification allows a datatable at TABLE:
Data is read using RCALL READTABLE.
This subroutine returns in S0 the byte in the table offset by S7.
ie if S7 = 2 , the second byte in the table is returned.

A table may be set up as follows (and MUST be before you use the call!):
At present (ver 1.7.x.x  and earlier - I will try to correct this in later versions)
 the TABLE MUST be the last thing in your soucre code...
AND the label TABLE must have a BYTE or EQUB statement on that line so
NOT:

TABLE:
		BYTE 01

but:

TABLE:	BYTE	01
	BYTE	02
	BYTE	04
	BYTE	08
	BYTE	10
	BYTE	20
	BYTE	40
	BYTE	80
		
(The directive EQUB is equivalent to BYTE in memory of motorola!)

Now the following:
	movi	S7,2
	rcall	readtable

will return with S0=04. OK?

ADC:

The ADC converts a voltage between 0-5V to a number with 8bit resolution.
RCALL READADC returns the value in S0;


BREAK POINTS;

If you write any amount of code it almost certainly will need de-bugging. A helpful tool here is to use Break points.
These can be inserted in the OCR code at any point:

	movi	S8,05
	RCALL	BREAK

Now this is ignored in the emulator, but once you have programmed it into a chip and then run it, 
once the code comes to the break point it will pause and send back to the PC the values of the registers etc.
The use of R8 is so that you can know which break point it is!!


Summary of OCR instructions:

MOVI Sd,n		Copy the byte n into register Sd 
MOV Sd,Ss		Copy the byte from As to Sd 
ADD Sd,Ss		Add the byte in Ss to the byte in Sd and store the result in Sd 
SUB Sd,Ss		Subtract the byte in Ss from the byte in Sd and store the result in Sd 
AND Sd,Ss		Logical AND the byte in Ss with the byte in Sd and store the result in Sd 
EOR Sd,Ss		Logical EOR the byte in Ss with the byte in Sd and store the result in Sd 
INC Sd			Add 1 to Sd 
DEC Sd			Subtract 1 from Sd 
IN Sd,I			Copy the byte at the input port into Sd 
OUT Q,Ss		Copy the byte in Ss to the output port 
JP e			Jump to label e  
JZ e			Jump to label e if the result of the last ADD, SUB, AND, EOR, INC, DEC, SHL or SHR was zero 
JNZ e			Jump to label e if the result of the last ADD, SUB, AND, EOR, INC, DEC SHL or SHR was not zero 
RCALL s			Push the program counter onto the stack to store the return address and then jump to label s 
RET				Pop the program counter from the stack to return to the place the subroutine was called from 
SHL Sd			Shift the byte in Sd one bit left putting a 0 into the lsb 
SHR Sd			Shift the byte in Sd one bit right putting a 0 into the msb


EXTENSIONS:

These are not part of the OCR language set but are included to help you along. They use seatures of the PICs which you
can access through OCR type code.

JGT:

This allow a conditional jump if the result of an immediately preceding SUB instruction gives a negative result.
It fulfils an annoying gap in the OCR language.
It can thus be used to jump if one register is greater than another.
So only to be used in the sequence  
SUB   Sd, Ss   
JGT e
in which case execution branches to e if Ss is greater than Sd. 
ie  if( Ss > Sd ) goto e
You must do the SUB before the JGT and it must be the immediately precceding instruction.

TRISQ:

(added for Elie 2013) This allows you to tristate the output port in software. S0 has to contain the bit mask. A zero bit programs that bit
of the output as an output and a 1 bit programs as input (ie tristated
so
	movi	S0,FF
	TRISQ

will (should?) program alll the bits as inputs and 

	movi	S0,0
	TRISQ	

will return to the normal state will all bits as active outputs.

EEPROM:

The pics have 255 bytes of EEPROM (which is non-volatile). 
You can read a byte from EEPROM by setting S7 to the address and then RCALL READEEPROM will return the byte in S0.
To write; set S7 to the address and S0 with the byte and RCALL WRITEEEPROM.
(added for Conor 2013)


RRf and RLF:
(read as "Rotate Register Right through carry" and  "Rotate Register Left through carry"
Added for Will W 2015. These shift instructions shift the bits in the given register one place left (RLF) or right (RRF).
The bit that "falls off the end" is remembered in the carry flag, and teh carry flag is used to push the new bit in.
This is NOT like SHl and SHR which shift by 1 bit but always put a zero in the space.

example:

	MOVI	SO,3	;ie 0000 0011
	MOVI	S1,0
	RRL		S1		;S1 still has x000 0000 but now the carry flag (C) is known to be zero
					;the x is because we don't know what was in the carry flag...
	MOVI	S1,0	; S1 = 0000 0000

	SHL		S0		;S0 now has 0000 0110  = 6
	RRF		S0		;S0 = 0000 0011   and C =0 (bit0 shifed out)
	RRF		S0		;S0=  0000 0001   and C =1
	RRF		S0		;S0 = 1000 0000   and C =1
	RLF		S1		;S1 = 0000 0001   and C=0
	etc


In-Line Assembler:

From v 1.6 I have tried to add the ability to add in-line assembler contained in curly braces {} eg:

;OCR langusge...
	MOVI	S0,3
	IN		S1,I
{
;this is Microchip assembler
		movlw	ff
		movf	A0
loop1:	decfsz	A0
		goto	loop1
		call	fred
}
;back to OCR code
		MOV		S2,S1
fred:	MOV	S0,2
		RET

The { and } must be the first and only characters on that line.
Same rules for labels etc as for OCR code.
The software emulator will ignore all asm code - obviously.
A full description of the instruction set is beyond this help page... vist the data sheet!
CC uses capitals for MOVI and OCR code and lower case for microchip assembler... be cool ... copy me.
The only Macro inplimented is   	BANKSEL	n		(n=0,1,2,3)  (oh... I also use capitals for Macros!)

Please flag errors!  There will be some!



FOR WINSTAR WG12864A display:

The following routines are icluded for Tristam Newman (U6in 2015/6) to drive the Winstar WG12864A display
The display is connected with PORTB to the data bus and Port C bits 5 to 0 as cs2,cs1,en,res,rs,r/w.
All I think preserve S0 except rddata

TRIS_CLEAR:	clears display to char in S0
TRIS_RESET: resets display
TRIS_SETX:  sets X to S0 (0<S0<8)
TRIS_SETY:  sets Y to S0 (0<S0<40)
TRIS_SETZ:  sets Z to S0
TRIS_CMD:   sends S0 as cmd byte -- in particular 	movi  S0,3F, RCALL	TRIS_cmd turns display on
TRIS_WRDATA: writes the byte in S0 to display (at X,Y)
TRIS_RDDATA: reads data from the display memory (at X,Y)  byte returned in S0
TRIS_SELCS1: selects columns 0-63 (left/top of display)
TRIS_SELCS2: selects columns 64-127 (right/bottom of display)



COMMENTS/RELEASE NOTES: 

Please feed comments and errors to CC (cclare@challoners.com)

ver 1.7 adds the in line assembler options ...
ver 1.6  adds RRF and RLF to OCR code and first attempt at embedded asm code (very much Beta!!!)

ver 1.5.nn.nn (Dec 2013) adds the EEPROM stuff and swopping of Q and I ports.

ver 1.4.nn.nn (Nov 2013)
Correction of the shl and shr instrcutions (didn't correctly set Z flag)
Various tidying and conversion to VS2010



Ver 1.3.nn.nn (2013)
Major version updates.
This version updates the serial programming stuff to work with the 16F886 as well as 16F876A and 16F876.
It also includs support for break points, and 
Also removed the K8055D support for the present.

Windows version (2012   v 1.2.x.x)
Re-written with copious and often aserbic comments from year 13 all taken into account in June 2012 as a Windows Aplication.
Major corrections are to make the ReadADC and ReadTable stuff work on 16F876, and re-writing the softaware emulator stuff.
Also added a simple hardware emulator based on the K8055D board (which if present takes precendence over the software switches

Version 1.1.nn.nn
I wrote this one day on my holiday (Sunday 26/7/09) when it rained all day and so it is likely to have bugs/design features that are un-intended. Please test and report!

