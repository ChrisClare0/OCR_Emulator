	LIST   P=PIC16F876	; list directive to define processor
	#include <p16F876.inc>	; processor specific variable definitions
	__CONFIG    _WDT_OFF  &  _XT_OSC & _DEBUG_ON  & _BODEN_OFF  & _PWRTE_ON & _LVP_OFF & _CPD_OFF & _CP_OFF

;**********************************************************************
;VARIABLE DEFINITIONS - the data memory starts at 0x20
R0		equ	0x20	;register use for OCR S0 etc
R1		equ	0x21
R2		equ	0x22
R3		equ	0x23
R4		equ	0x24		
R5		equ	0x25		
R6		equ	0x26		
R7		equ	0x27		
w_temp		equ	0x28        ; variable used for context saving 
status_temp	equ	0x29        ; variable used for context saving
temp1		equ	0x2a	;following used for gen purpose in routines
temp2		equ	0x2b
A0		equ	0x2c
A1		equ	0x2d
A2		equ	0x2e
R8		equ	0x2f	;register use for OCR S0 etc
R9		equ	0x30
R10		equ	0x31
R11		equ	0x32
R12		equ	0x33		
R13		equ	0x34		
R14		equ	0x35		
R15		equ	0x36
R16		equ	0x37	;register use for OCR S0 etc
R17		equ	0x38
R18		equ	0x39
R19		equ	0x40
R20		equ	0x41	

;**********************************************************************
		ORG	0x000		; processor reset vector
		NOP
		goto	setup		; go to beginning of program
		ORG	0x004		; interrupt vector location
		movwf	w_temp		; save off current W register contents
		movf	STATUS,w	; move status register into W register
		movwf	status_temp	; save off contents of STATUS register
;int code goes here
Exit_Int
		movf    	status_temp,w	; retrieve copy of STATUS register
		movwf	STATUS		;restore pre-isr STATUS register contents
		swapf   	w_temp,f
		swapf   	w_temp,w	; restore pre-isr W register contents
		retfie
;**********************************************************************
;PORTC AS OUTPUT   PORTB as input
setup
		BANKSEL	PORTC
		clrf	PORTC
		BANKSEL	TRISC
		movlw	B'00000000'
		movwf	TRISC
		BANKSEL	PORTB
		clrf	PORTB
		BANKSEL	TRISB
		movlw	B'11111111'
		movwf	TRISB
		BANKSEL	PORTA
		goto	main

;**********************************************************************
;routines for the OCR macros
WAIT1MS
		movlw	0
		movwf	temp1
		decfsz	temp1,1
		goto	$-1
		return
;
READTABLE
;R7 points to table
		movf	R7,W
		bsf	STATUS, RP1
		BCF	STATUS, RP0
		movwf	EEADR
		movlw 	0x04
		movwf	EEADRH
		bsf	STATUS,RP0
		bsf	EECON1,EEPGD
		bsf	EECON1,RD
		nop
		nop
		bcf	STATUS,RP0
		movf	EEDATA,W
		BANKSEL	PORTC
		movwf	R0
		BANKSEL	EEDATH
		movf	EEDATH,W
		BANKSEL	PORTC
		;movwf	R1
		return
		
READADC
;return result in R0
	banksel ADCON1
	movlw   b'00001110'  ; set as ADRESH is left justified and use AN0 as analog intput with int ref
	movwf	ADCON1
	banksel	ADCON0
	movlw	b'00000101'	;set go
	movwf	ADCON0
	btfsc	ADCON0,2
	goto	$-1
	movf	ADRESH,W	;top 8 bits.....
	movwf	R0
	return

;about 325 ms at 4MHz
delay
		movlw	0xff
		movwf	A1
d0
		movwf	A0
d1
		decfsz	A0,F
		goto	d1
		decfsz	A1,F
		goto	d0
		return

delay1
;A2 has no of loops on entry
		movlw	0xff
		movwf	A1
delay10
		movwf	A0
delay11
		decfsz	A0,F
		goto	delay11
		decfsz	A1,F
		goto	delay10
		decfsz	A2,F
		goto	delay1
		return
;**********************************************************************
;main pogram follows here
main
